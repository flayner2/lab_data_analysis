# Third-party imports
import pytest
from Bio.Seq import Seq

# Own module imports
from . import filter_seqs
from . import masked_seqs_stats
from .estseq import ESTSeq
from .swat_parser import AlignmentRecord

# TODO: document all tests
def test_null_seq():
    with pytest.raises(AssertionError):
        filter_seqs.remove_xgroup_by_seq_class(None, None, None)


def test_seq_not_changed():
    seq_without_x = Seq(
        (
            "TTTTTATAAGAATTGCAGTGTGATACGAAATACTAGAACATCATTTTATAATCCGTGTAATAAAAATTATAAT"
            "CTAGTATGTGTACTGCATTAGATCAATGGTTTTATATATATATCTATATAGTTTATCGTGCTTATTTAACGAA"
            "CGCTTTGTAAAAAAGTGTTTTTTTTTTTTGTATAAGCATTCACATTATTAAAAACATTATTATCAATTAATTT"
            "GAAAATTTTATTTCTATATTATATTATCGCAGGTATCGAGTATAATTACGCGAACACGATGCGGCATCTTTTT"
            "CAATATTATAAAATAATTATATATGTATAATAATTACCTATAATAGATTCAATAATAAATATTCATTTAAAAT"
            "ATCTCTTAAAAGAGTTTTTTCTTTACAGCGGTATATCTTTCCATATAGTTATCATAACCATCAAGATTAGCAA"
            "ATTGTTTTATCTCAAATAAATTTCCTTCAACAGACAGGACTGAAATTTTAGAATTTTTCAAAATTTTACTAGG"
            "TATTGCATTCAGTTGTAAACAATTTTCTTCAAGTCTTAATGT"
        )
    )

    assert (
        filter_seqs.remove_xgroup_by_seq_class(seq_without_x, None, None)
        == seq_without_x
    )


def test_class1_trimming():
    class_1 = Seq(
        (
            "ACTCTTTNCTCAGCTATGCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXACTGGAATCGGA"
            "ATGCGCCGCACCAGGAGAAAAACCACGGTTCCTTGGTGTTCGCGAGCAGCGAGTAACGCATATTTTAATCTTT"
            "TTGATGATCGGTTGTTCGGTCCTACTCACACCAATGTTGAGACACATACCTATGCCGGTATTATTCGGCGTTT"
            "TTCTTTATATGGGAGTCGCTTCGTTGAAAGGACTTCAATTTTTCGACAGAATTTTAATTATGTTGATGCCGGT"
            "TAAATACCAACCCGATTATATGTTTCTTCGTCAGGTACCTCGGCCGCGACCACGCTXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXA"
        )
    )
    seq_class, xgroups = masked_seqs_stats.find_x_regions_and_calculate_stats(class_1)
    expected = Seq(
        (
            "ACTGGAATCGGAATGCGCCGCACCAGGAGAAAAACCACGGTTCCTTGGTGTTCGCGAGCAGCGAGTAACGCAT"
            "ATTTTAATCTTTTTGATGATCGGTTGTTCGGTCCTACTCACACCAATGTTGAGACACATACCTATGCCGGTAT"
            "TATTCGGCGTTTTTCTTTATATGGGAGTCGCTTCGTTGAAAGGACTTCAATTTTTCGACAGAATTTTAATTAT"
            "GTTGATGCCGGTTAAATACCAACCCGATTATATGTTTCTTCGTCAGGTACCTCGGCCGCGACCACGCT"
        )
    )

    assert (
        filter_seqs.remove_xgroup_by_seq_class(class_1, seq_class, xgroups) == expected
    )


def test_class3_trimming():
    class_3 = Seq(
        (
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXACCTCCTATATATATATGTA"
            "TATATATATATATATATCAATGTGTAATACCGCTAGTTTTCTCTCGATTCGTTCGAAAATTGTGGCTCTTTCG"
            "GGCGAAACCGGCTGGGTCTGTGTGTACTCTCATCCTGTTTCGTGAACCGAAAGCTCCCTTTCTCCGAAGAAGA"
            "AGAATACATTTTTTTTTCGTGCGCGTAACACGCAACGGGCATTAAGTTACAAACGAAACGAGCTTTACCGCGT"
            "TCCTTCCCTTTAAGGGAGTCGCGGATGTTATACAAATGAAAAGAAAAAG"
        )
    )
    seq_class, xgroups = masked_seqs_stats.find_x_regions_and_calculate_stats(class_3)
    expected = Seq(
        (
            "ACCTCCTATATATATATGTATATATATATATATATATCAATGTGTAATACCGCTAGTTTTCTCTCGATTCGTT"
            "CGAAAATTGTGGCTCTTTCGGGCGAAACCGGCTGGGTCTGTGTGTACTCTCATCCTGTTTCGTGAACCGAAAG"
            "CTCCCTTTCTCCGAAGAAGAAGAATACATTTTTTTTTCGTGCGCGTAACACGCAACGGGCATTAAGTTACAAA"
            "CGAAACGAGCTTTACCGCGTTCCTTCCCTTTAAGGGAGTCGCGGATGTTATACAAATGAAAAGAAAAAG"
        )
    )

    assert (
        filter_seqs.remove_xgroup_by_seq_class(class_3, seq_class, xgroups) == expected
    )


def test_class6_trimming():
    class_6 = Seq(
        (
            "GGGTTAGTTCAACGGAATCCCGGAAAGTAGCGAGTGTGAGACACGACGGTACCGCTCTATAAAATCATAAAGA"
            "GCGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXX"
        )
    )
    seq_class, xgroups = masked_seqs_stats.find_x_regions_and_calculate_stats(class_6)
    expected = Seq(
        (
            "GGGTTAGTTCAACGGAATCCCGGAAAGTAGCGAGTGTGAGACACGACGGTACCGCTCTATAAAATCATAAAGA"
            "GCG"
        )
    )

    assert (
        filter_seqs.remove_xgroup_by_seq_class(class_6, seq_class, xgroups) == expected
    )


def test_class7_trimming():
    class_7 = Seq(
        (
            "GTGCGTGCATGTGTGTGTGTGAGGGTACGTGAGGTATGTGTAACACAATATAGTATAAAATACTAATATTGTA"
            "CAAAATAAAGGATTAAAAATCAAAGCACAATTTATCATTTTATCAAATTGTATTGAGACTAATATACATGTAA"
            "AATATTTAAGTACAATATTGGTTATAAAACATGATATATTAATTAATTTGCTTTTATGTTTTAGGCATATTAT"
            "TTACTATTAATTAAAAGTATTAAGTTTGTTATAAATAATGATTAACGATACAGTAGCTTATTATAAATAAGAT"
            "GAAATAATTGAAATAATTTGTGTATCAAATAATTACTATATTATTAAAGTGTTGATATTATACTCGTTAAAAA"
            "AAAAAAAAATATCCAAAAAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXTTT"
        )
    )
    seq_class, xgroups = masked_seqs_stats.find_x_regions_and_calculate_stats(class_7)
    expected = Seq(
        (
            "GTGCGTGCATGTGTGTGTGTGAGGGTACGTGAGGTATGTGTAACACAATATAGTATAAAATACTAATATTGTA"
            "CAAAATAAAGGATTAAAAATCAAAGCACAATTTATCATTTTATCAAATTGTATTGAGACTAATATACATGTAA"
            "AATATTTAAGTACAATATTGGTTATAAAACATGATATATTAATTAATTTGCTTTTATGTTTTAGGCATATTAT"
            "TTACTATTAATTAAAAGTATTAAGTTTGTTATAAATAATGATTAACGATACAGTAGCTTATTATAAATAAGAT"
            "GAAATAATTGAAATAATTTGTGTATCAAATAATTACTATATTATTAAAGTGTTGATATTATACTCGTTAAAAA"
            "AAAAAAAAATATCCAAAAA"
        )
    )

    assert (
        filter_seqs.remove_xgroup_by_seq_class(class_7, seq_class, xgroups) == expected
    )


def test_subsequence_trimming():
    mock_seq = Seq("ACTGCTGCGACGAAAAAAAAAAAAAAAACCXXXXXXGTA")
    positions = (13, 28)
    expected = Seq("ACTGCTGCGACGCCXXXXXXGTA")

    assert filter_seqs.trim_subsequence(mock_seq, positions) == expected


def test_trimming_based_on_distance():
    # Mock test data
    mock_seq = Seq("ACTGCTGCGACGAAAAAAAAAAAAAAAACCXXXXXXGTA")
    mock_estseq = ESTSeq("ABC", "A", mock_seq)
    mock_estseq.set_masked_seq(mock_seq)

    # Setting the alignments
    positions = (13, 28)
    al = AlignmentRecord("ABC", 123, 10.0, "XYZ")
    al.set_alignment_positions(positions)
    mock_estseq.set_alignments([al])

    # Setting the xgroups
    seq_class, xgroups = masked_seqs_stats.find_x_regions_and_calculate_stats(mock_seq)
    mock_estseq.set_xgroups(xgroups[0])
    mock_estseq.set_seq_class(seq_class)

    # Expected data
    expected_seq = Seq("ACTGCTGCGACGCCXXXXXXGTA")
    expected_estseq = ESTSeq("ABC", "A", expected_seq)
    expected_estseq.set_processed_seq(expected_seq)

    # Modify the sequence
    filter_seqs.trim_polynucleotides_by_dist_to_xgroups(mock_estseq, 10, 8.0, True)

    assert mock_estseq.processed_seq == expected_estseq.processed_seq
